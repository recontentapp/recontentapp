datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  engineType      = "binary"
}

enum WorkspaceBillingPlan {
  free @map("free")
  pro  @map("pro")
}

enum WorkspaceBillingStatus {
  active           @map("active")
  inactive         @map("inactive")
  payment_required @map("payment_required")
}

enum WorkspaceAccountRole {
  owner  @map("owner")
  biller @map("biller")
  member @map("member")
  guest  @map("guest")
}

enum WorkspaceAccountType {
  human   @map("human")
  service @map("service")
}

enum ProjectRevisionState {
  open   @map("open")
  closed @map("closed")
}

enum DestinationType {
  cdn                  @map("cdn")
  aws_s3               @map("aws_s3")
  google_cloud_storage @map("google_cloud_storage")
  github               @map("github")
}

enum DestinationSyncFrequency {
  manually @map("manually")
  daily    @map("daily")
  weekly   @map("weekly")
}

model User {
  id                String             @id @default(uuid()) @db.VarChar()
  firstName         String             @db.VarChar()
  lastName          String             @db.VarChar()
  email             String             @db.VarChar()
  encryptedPassword String?            @db.VarChar()
  providerName      String             @default("email") @db.VarChar()
  providerId        String             @db.VarChar()
  confirmationCode  String?            @db.VarChar()
  resetPasswordCode String?            @db.VarChar()
  accounts          WorkspaceAccount[]

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  blockedAt           DateTime?
  confirmedAt         DateTime?
  resetPasswordSentAt DateTime?

  @@unique([providerName, providerId])
  @@map("users")
}

model Service {
  id   String @id @default(uuid()) @db.VarChar()
  name String @db.VarChar()

  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  accounts  WorkspaceAccount[]

  @@map("services")
}

model Workspace {
  id                                   String                                @id @default(uuid()) @db.VarChar()
  key                                  String                                @db.VarChar()
  name                                 String                                @db.VarChar()
  billingSettings                      WorkspaceBillingSettings?
  invitations                          WorkspaceInvitation[]
  accounts                             WorkspaceAccount[]
  revisions                            ProjectRevision[]
  languages                            Language[]
  projects                             Project[]
  phrases                              Phrase[]
  phraseTranslations                   PhraseTranslation[]
  destinations                         Destination[]
  destinationConfigsCDN                DestinationConfigCDN[]
  destinationConfigsGoogleCloudStorage DestinationConfigGoogleCloudStorage[]
  destinationConfigsAWSS3              DestinationConfigAWSS3[]
  destinationConfigsGithub             DestinationConfigGithub[]
  githubInstallations                  GithubInstallation[]
  tags                                 Tag[]
  taggables                            Taggable[]
  figmaFiles                           FigmaFile[]
  figmaTexts                           FigmaText[]
  prompts                              Prompt[]
  glossaries                           Glossary[]
  glossaryTerms                        GlossaryTerm[]
  glossaryTermTranslations             GlossaryTermTranslation[]
  aiUsageEvents                        AIUsageEvent[]
  emailLayouts                         EmailLayout[]
  emailTemplates                       EmailTemplate[]
  emailVariables                       EmailVariable[]
  emailVariableTranslations            EmailVariableTranslation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   @db.VarChar()
  updatedBy String?  @db.VarChar()

  @@unique([key])
  @@map("workspaces")
}

model WorkspaceBillingSettings {
  id                   String                 @id @default(uuid()) @db.VarChar()
  workspaceId          String                 @db.VarChar()
  stripeCustomerId     String?                @db.VarChar()
  stripeSubscriptionId String?                @db.VarChar()
  plan                 WorkspaceBillingPlan   @default(free)
  status               WorkspaceBillingStatus @default(active)
  workspace            Workspace              @relation(fields: [workspaceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   @db.VarChar()
  updatedBy String?  @db.VarChar()

  @@unique([workspaceId])
  @@unique([stripeCustomerId])
  @@unique([stripeSubscriptionId])
  @@map("workspace_billing_settings")
}

model WorkspaceAccount {
  id            String               @id @default(uuid()) @db.VarChar()
  workspaceId   String               @db.VarChar()
  type          WorkspaceAccountType
  role          WorkspaceAccountRole
  userId        String?              @db.VarChar()
  serviceId     String?              @db.VarChar()
  apiKey        String?              @db.VarChar()
  user          User?                @relation(fields: [userId], references: [id])
  service       Service?             @relation(fields: [serviceId], references: [id])
  workspace     Workspace            @relation(fields: [workspaceId], references: [id])
  aiUsageEvents AIUsageEvent[]

  invitedBy String?   @db.VarChar()
  blockedBy String?   @db.VarChar()
  blockedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([userId, workspaceId])
  @@unique([apiKey])
  @@map("workspace_accounts")
}

model WorkspaceInvitation {
  id             String               @id @default(uuid()) @db.VarChar()
  workspaceId    String               @db.VarChar()
  role           WorkspaceAccountRole
  email          String               @db.VarChar()
  invitationCode String               @db.VarChar()
  workspace      Workspace            @relation(fields: [workspaceId], references: [id])

  createdBy  String    @db.VarChar()
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  expiredAt  DateTime
  acceptedAt DateTime?

  @@map("workspace_invitations")
}

model Language {
  id                        String                     @id @default(uuid()) @db.VarChar()
  workspaceId               String                     @db.VarChar()
  locale                    String                     @db.VarChar()
  name                      String                     @db.VarChar()
  workspace                 Workspace                  @relation(fields: [workspaceId], references: [id])
  projects                  Project[]                  @relation("projects_languages")
  phraseTranslations        PhraseTranslation[]
  glossaryTermTranslations  GlossaryTermTranslation[]
  emailVariableTranslations EmailVariableTranslation[]
  figmaFiles                FigmaFile[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   @db.VarChar()
  updatedBy String?  @db.VarChar()

  @@unique([workspaceId, locale])
  @@map("languages")
}

model Prompt {
  id                 String    @id @default(uuid()) @db.VarChar()
  workspaceId        String    @db.VarChar()
  glossaryId         String?   @db.VarChar()
  name               String    @db.VarChar()
  description        String?   @db.VarChar()
  tone               String?   @db.VarChar()
  length             String?   @db.VarChar()
  customInstructions String[]
  workspace          Workspace @relation(fields: [workspaceId], references: [id])
  glossary           Glossary? @relation(fields: [glossaryId], references: [id])
  projects           Project[] @relation("projects_prompts")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   @db.VarChar()
  updatedBy String?  @db.VarChar()

  @@map("prompts")
}

model Glossary {
  id          String         @id @default(uuid()) @db.VarChar()
  workspaceId String         @db.VarChar()
  name        String         @db.VarChar()
  description String?        @db.VarChar()
  workspace   Workspace      @relation(fields: [workspaceId], references: [id])
  terms       GlossaryTerm[]
  projects    Project[]
  prompts     Prompt[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   @db.VarChar()
  updatedBy String?  @db.VarChar()

  @@map("glossaries")
}

model GlossaryTerm {
  id              String                    @id @default(uuid()) @db.VarChar()
  glossaryId      String                    @db.VarChar()
  workspaceId     String                    @db.VarChar()
  name            String                    @db.VarChar()
  description     String?                   @db.VarChar()
  forbidden       Boolean                   @default(false)
  caseSensitive   Boolean                   @default(false)
  nonTranslatable Boolean                   @default(false)
  glossary        Glossary                  @relation(fields: [glossaryId], references: [id])
  workspace       Workspace                 @relation(fields: [workspaceId], references: [id])
  translations    GlossaryTermTranslation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   @db.VarChar()
  updatedBy String?  @db.VarChar()

  @@map("glossary_terms")
}

model GlossaryTermTranslation {
  id          String       @id @default(uuid()) @db.VarChar()
  languageId  String       @db.VarChar()
  termId      String       @db.VarChar()
  workspaceId String       @db.VarChar()
  content     String
  language    Language     @relation(fields: [languageId], references: [id])
  term        GlossaryTerm @relation(fields: [termId], references: [id])
  workspace   Workspace    @relation(fields: [workspaceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([termId, languageId])
  @@map("glossary_term_translations")
}

model Project {
  id             String            @id @default(uuid()) @db.VarChar()
  workspaceId    String            @db.VarChar()
  glossaryId     String?           @db.VarChar()
  name           String            @db.VarChar()
  description    String?           @db.VarChar()
  workspace      Workspace         @relation(fields: [workspaceId], references: [id])
  glossary       Glossary?         @relation(fields: [glossaryId], references: [id])
  languages      Language[]        @relation("projects_languages")
  prompts        Prompt[]          @relation("projects_prompts")
  revisions      ProjectRevision[]
  phrases        Phrase[]
  tags           Tag[]
  figmaFiles     FigmaFile[]
  emailLayouts   EmailLayout[]
  emailTemplates EmailTemplate[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   @db.VarChar()
  updatedBy String?  @db.VarChar()

  @@unique([workspaceId, name])
  @@map("projects")
}

model ProjectRevision {
  id                 String               @id @default(uuid()) @db.VarChar()
  workspaceId        String               @db.VarChar()
  projectId          String               @db.VarChar()
  isMaster           Boolean              @default(false)
  name               String               @db.VarChar()
  state              ProjectRevisionState
  project            Project              @relation(fields: [projectId], references: [id])
  workspace          Workspace            @relation(fields: [workspaceId], references: [id])
  phrases            Phrase[]
  phraseTranslations PhraseTranslation[]
  destinations       Destination[]
  figmaFiles         FigmaFile[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  mergedAt  DateTime?
  createdBy String    @db.VarChar()
  updatedBy String?   @db.VarChar()
  mergedBy  String?   @db.VarChar()

  @@map("project_revisions")
}

model Phrase {
  id           String              @id @default(uuid()) @db.VarChar()
  key          String              @db.VarChar()
  revisionId   String              @db.VarChar()
  projectId    String              @db.VarChar()
  workspaceId  String              @db.VarChar()
  revision     ProjectRevision     @relation(fields: [revisionId], references: [id])
  project      Project             @relation(fields: [projectId], references: [id])
  workspace    Workspace           @relation(fields: [workspaceId], references: [id])
  translations PhraseTranslation[]
  taggables    Taggable[]          @relation("phrase_tags")
  figmaTexts   FigmaText[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   @db.VarChar()
  updatedBy String?  @db.VarChar()

  @@unique([key, revisionId])
  @@map("phrases")
}

model PhraseTranslation {
  id          String          @id @default(uuid()) @db.VarChar()
  languageId  String          @db.VarChar()
  revisionId  String          @db.VarChar()
  workspaceId String          @db.VarChar()
  phraseId    String          @db.VarChar()
  content     String
  language    Language        @relation(fields: [languageId], references: [id])
  phrase      Phrase          @relation(fields: [phraseId], references: [id])
  revision    ProjectRevision @relation(fields: [revisionId], references: [id])
  workspace   Workspace       @relation(fields: [workspaceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   @db.VarChar()
  updatedBy String?  @db.VarChar()

  @@unique([phraseId, languageId, revisionId])
  @@map("phrase_translations")
}

model Tag {
  id          String    @id @default(uuid()) @db.VarChar()
  workspaceId String    @db.VarChar()
  projectId   String    @db.VarChar()
  key         String    @db.VarChar()
  value       String    @db.VarChar()
  color       String
  description String?
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  project     Project   @relation(fields: [projectId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   @db.VarChar()
  updatedBy String?  @db.VarChar()

  @@unique([projectId, key, value])
  @@map("tags")
}

enum TaggableType {
  phrase @map("phrase")
}

model Taggable {
  id          String       @id @default(uuid()) @db.VarChar()
  workspaceId String       @db.VarChar()
  tagId       String       @db.VarChar()
  recordId    String       @db.VarChar()
  recordType  TaggableType
  phrase      Phrase?      @relation("phrase_tags", fields: [recordId], references: [id])
  workspace   Workspace    @relation(fields: [workspaceId], references: [id])

  createdAt DateTime @default(now())
  createdBy String   @db.VarChar()

  @@map("taggables")
}

model Destination {
  id                       String                               @id @default(uuid()) @db.VarChar()
  workspaceId              String                               @db.VarChar()
  revisionId               String                               @db.VarChar()
  name                     String                               @db.VarChar()
  type                     DestinationType
  syncFrequency            DestinationSyncFrequency             @default(manually)
  active                   Boolean                              @default(true)
  lastSyncError            String?
  lastSyncAt               DateTime?
  lastSuccessfulSyncAt     DateTime?
  workspace                Workspace                            @relation(fields: [workspaceId], references: [id])
  revision                 ProjectRevision                      @relation(fields: [revisionId], references: [id])
  configCDN                DestinationConfigCDN?
  configGoogleCloudStorage DestinationConfigGoogleCloudStorage?
  configAWSS3              DestinationConfigAWSS3?
  configGithub             DestinationConfigGithub?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   @db.VarChar()
  updatedBy String?  @db.VarChar()

  @@map("destinations")
}

model DestinationConfigCDN {
  id                       String      @id @default(uuid()) @db.VarChar()
  destinationId            String      @db.VarChar()
  workspaceId              String      @db.VarChar()
  destination              Destination @relation(fields: [destinationId], references: [id])
  workspace                Workspace   @relation(fields: [workspaceId], references: [id])
  fileFormat               String      @db.VarChar()
  includeEmptyTranslations Boolean     @default(false)
  urls                     String[]

  @@unique([destinationId])
  @@map("destination_configs_cdn")
}

model DestinationConfigGoogleCloudStorage {
  id                       String      @id @default(uuid()) @db.VarChar()
  destinationId            String      @db.VarChar()
  workspaceId              String      @db.VarChar()
  destination              Destination @relation(fields: [destinationId], references: [id])
  workspace                Workspace   @relation(fields: [workspaceId], references: [id])
  fileFormat               String      @db.VarChar()
  includeEmptyTranslations Boolean     @default(false)
  objectsPrefix            String?     @db.VarChar()
  googleCloudProjectId     String      @db.VarChar()
  googleCloudBucketId      String      @db.VarChar()

  // Encrypted
  googleCloudServiceAccountKey String

  @@unique([destinationId])
  @@map("destination_configs_google_cloud_storage")
}

model DestinationConfigAWSS3 {
  id                       String      @id @default(uuid()) @db.VarChar()
  destinationId            String      @db.VarChar()
  workspaceId              String      @db.VarChar()
  destination              Destination @relation(fields: [destinationId], references: [id])
  workspace                Workspace   @relation(fields: [workspaceId], references: [id])
  fileFormat               String      @db.VarChar()
  includeEmptyTranslations Boolean     @default(false)
  objectsPrefix            String?     @db.VarChar()
  awsBucketId              String      @db.VarChar()
  awsRegion                String      @db.VarChar()

  // Encrypted
  awsAccessKeyId     String
  // Encrypted
  awsSecretAccessKey String

  @@unique([destinationId])
  @@map("destination_configs_aws_s3")
}

model DestinationConfigGithub {
  id                       String             @id @default(uuid()) @db.VarChar()
  destinationId            String             @db.VarChar()
  workspaceId              String             @db.VarChar()
  installationId           String             @db.VarChar()
  installation             GithubInstallation @relation(fields: [installationId], references: [id])
  destination              Destination        @relation(fields: [destinationId], references: [id])
  workspace                Workspace          @relation(fields: [workspaceId], references: [id])
  fileFormat               String             @db.VarChar()
  includeEmptyTranslations Boolean            @default(false)
  repositoryOwner          String             @db.VarChar()
  repositoryName           String             @db.VarChar()
  baseBranchName           String             @db.VarChar()
  objectsPrefix            String?            @db.VarChar()

  @@unique([destinationId])
  @@map("destination_configs_github")
}

model GithubInstallation {
  id                       String                    @id @default(uuid()) @db.VarChar()
  workspaceId              String                    @db.VarChar()
  githubId                 Int
  active                   Boolean
  githubAccount            String
  workspace                Workspace                 @relation(fields: [workspaceId], references: [id])
  destinationConfigsGithub DestinationConfigGithub[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   @db.VarChar()
  updatedBy String?  @db.VarChar()

  @@unique([githubId])
  @@map("github_installations")
}

model FigmaFile {
  id          String          @id @default(uuid()) @db.VarChar()
  workspaceId String          @db.VarChar()
  projectId   String          @db.VarChar()
  revisionId  String          @db.VarChar()
  languageId  String          @db.VarChar()
  // Extracted from Figma file URL
  key         String          @db.VarChar()
  url         String          @db.VarChar()
  name        String          @db.VarChar()
  workspace   Workspace       @relation(fields: [workspaceId], references: [id])
  project     Project         @relation(fields: [projectId], references: [id])
  revision    ProjectRevision @relation(fields: [revisionId], references: [id])
  language    Language        @relation(fields: [languageId], references: [id])
  texts       FigmaText[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   @db.VarChar()
  updatedBy String?  @db.VarChar()

  @@unique([key])
  @@map("figma_files")
}

model FigmaText {
  id          String    @id @default(uuid()) @db.VarChar()
  fileId      String    @db.VarChar()
  workspaceId String    @db.VarChar()
  phraseId    String    @db.VarChar()
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  file        FigmaFile @relation(fields: [fileId], references: [id])
  phrase      Phrase    @relation(fields: [phraseId], references: [id])

  // Node IDs are not unique across files
  textNodeId String @db.VarChar()
  pageNodeId String @db.VarChar()

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   @db.VarChar()
  updatedBy String?  @db.VarChar()

  @@index([fileId, pageNodeId])
  @@map("figma_texts")
}

model AIUsageEvent {
  id                String           @id @default(uuid()) @db.VarChar()
  workspaceId       String           @db.VarChar()
  accountId         String           @db.VarChar()
  inputTokensCount  Int
  outputTokensCount Int
  account           WorkspaceAccount @relation(fields: [accountId], references: [id])
  workspace         Workspace        @relation(fields: [workspaceId], references: [id])

  createdAt DateTime @default(now())

  @@index([createdAt])
  @@map("ai_usage_events")
}

model EmailLayout {
  id          String          @id @default(uuid()) @db.VarChar()
  workspaceId String          @db.VarChar()
  projectId   String          @db.VarChar()
  key         String          @db.VarChar()
  description String?         @db.VarChar()
  content     String
  project     Project         @relation(fields: [projectId], references: [id])
  workspace   Workspace       @relation(fields: [workspaceId], references: [id])
  templates   EmailTemplate[]
  variables   EmailVariable[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   @db.VarChar()
  updatedBy String?  @db.VarChar()

  @@map("email_layouts")
}

model EmailTemplate {
  id          String          @id @default(uuid()) @db.VarChar()
  workspaceId String          @db.VarChar()
  projectId   String          @db.VarChar()
  layoutId    String?         @db.VarChar()
  key         String          @db.VarChar()
  description String?         @db.VarChar()
  content     String
  workspace   Workspace       @relation(fields: [workspaceId], references: [id])
  project     Project         @relation(fields: [projectId], references: [id])
  layout      EmailLayout?    @relation(fields: [layoutId], references: [id])
  variables   EmailVariable[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   @db.VarChar()
  updatedBy String?  @db.VarChar()

  @@map("email_templates")
}

model EmailVariable {
  id             String                     @id @default(uuid()) @db.VarChar()
  workspaceId    String                     @db.VarChar()
  layoutId       String?                    @db.VarChar()
  templateId     String?                    @db.VarChar()
  key            String                     @db.VarChar()
  defaultContent String
  workspace      Workspace                  @relation(fields: [workspaceId], references: [id])
  layout         EmailLayout?               @relation(fields: [layoutId], references: [id])
  template       EmailTemplate?             @relation(fields: [templateId], references: [id])
  translations   EmailVariableTranslation[]

  @@unique([layoutId, templateId, key])
  @@map("email_variables")
}

model EmailVariableTranslation {
  id          String        @id @default(uuid()) @db.VarChar()
  languageId  String        @db.VarChar()
  workspaceId String        @db.VarChar()
  variableId  String        @db.VarChar()
  content     String
  language    Language      @relation(fields: [languageId], references: [id])
  variable    EmailVariable @relation(fields: [variableId], references: [id])
  workspace   Workspace     @relation(fields: [workspaceId], references: [id])

  @@unique([variableId, languageId])
  @@map("email_variable_translations")
}
