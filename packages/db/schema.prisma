datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum WorkspaceAccountRole {
  owner  @map("owner")
  biller @map("biller")
  member @map("member")
  guest  @map("guest")
}

enum WorkspaceAccountType {
  human   @map("human")
  service @map("service")
}

enum ProjectRevisionState {
  open   @map("open")
  closed @map("closed")
}

model User {
  id                String             @id @default(uuid()) @db.VarChar()
  firstName         String             @db.VarChar()
  lastName          String             @db.VarChar()
  email             String             @db.VarChar()
  encryptedPassword String?            @db.VarChar()
  providerName      String             @default("email") @db.VarChar()
  providerId        String             @db.VarChar()
  confirmationCode  String?            @db.VarChar()
  resetPasswordCode String?            @db.VarChar()
  accounts          WorkspaceAccount[]

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  blockedAt           DateTime?
  confirmedAt         DateTime?
  resetPasswordSentAt DateTime?

  @@unique([providerName, providerId])
  @@map("users")
}

model Service {
  id   String @id @default(uuid()) @db.VarChar()
  name String @db.VarChar()

  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  accounts  WorkspaceAccount[]

  @@map("services")
}

model Workspace {
  id          String                @id @default(uuid()) @db.VarChar()
  key         String                @db.VarChar()
  name        String                @db.VarChar()
  invitations WorkspaceInvitation[]
  accounts    WorkspaceAccount[]
  revisions   ProjectRevision[]
  languages   Language[]
  projects    Project[]
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  createdBy   String                @db.VarChar()
  updatedBy   String?               @db.VarChar()

  @@unique([key])
  @@map("workspaces")
}

model WorkspaceAccount {
  id          String               @id @default(uuid()) @db.VarChar()
  workspaceId String               @db.VarChar()
  type        WorkspaceAccountType
  role        WorkspaceAccountRole
  userId      String?              @db.VarChar()
  serviceId   String?              @db.VarChar()
  apiKey      String?              @db.VarChar()
  user        User?                @relation(fields: [userId], references: [id])
  service     Service?             @relation(fields: [serviceId], references: [id])
  workspace   Workspace            @relation(fields: [workspaceId], references: [id])

  invitedBy String?  @db.VarChar()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, workspaceId])
  @@unique([apiKey])
  @@index([workspaceId])
  @@map("workspace_accounts")
}

model WorkspaceInvitation {
  id             String               @id @default(uuid()) @db.VarChar()
  workspaceId    String               @db.VarChar()
  role           WorkspaceAccountRole
  email          String               @db.VarChar()
  invitationCode String               @db.VarChar()
  workspace      Workspace            @relation(fields: [workspaceId], references: [id])

  createdBy  String    @db.VarChar()
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  expiredAt  DateTime
  acceptedAt DateTime?

  @@index([workspaceId])
  @@map("workspace_invitations")
}

model Language {
  id          String    @id @default(uuid()) @db.VarChar()
  workspaceId String    @db.VarChar()
  locale      String    @db.VarChar()
  name        String    @db.VarChar()
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  projects    Project[] @relation("projects_languages")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   @db.VarChar()
  updatedBy String?  @db.VarChar()

  @@unique([workspaceId, locale])
  @@index([workspaceId])
  @@map("languages")
}

model Project {
  id          String            @id @default(uuid()) @db.VarChar()
  workspaceId String            @db.VarChar()
  name        String            @db.VarChar()
  description String?           @db.VarChar()
  workspace   Workspace         @relation(fields: [workspaceId], references: [id])
  languages   Language[]        @relation("projects_languages")
  revisions   ProjectRevision[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   @db.VarChar()
  updatedBy String?  @db.VarChar()

  @@unique([workspaceId, name])
  @@index([workspaceId])
  @@map("projects")
}

model ProjectRevision {
  id          String               @id @default(uuid()) @db.VarChar()
  workspaceId String               @db.VarChar()
  projectId   String               @db.VarChar()
  isMaster    Boolean              @default(false)
  name        String               @db.VarChar()
  state       ProjectRevisionState
  project     Project              @relation(fields: [projectId], references: [id])
  workspace   Workspace            @relation(fields: [workspaceId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  mergedAt  DateTime?
  createdBy String    @db.VarChar()
  updatedBy String?   @db.VarChar()
  mergedBy  String?   @db.VarChar()

  @@index([workspaceId])
  @@map("project_revisions")
}
