datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum WorkspaceBillingPlan {
  free @map("free")
}

enum WorkspaceAccountRole {
  owner  @map("owner")
  biller @map("biller")
  member @map("member")
  guest  @map("guest")
}

enum WorkspaceAccountType {
  human   @map("human")
  service @map("service")
}

enum ProjectRevisionState {
  open   @map("open")
  closed @map("closed")
}

enum DestinationType {
  cdn                  @map("cdn")
  aws_s3               @map("aws_s3")
  google_cloud_storage @map("google_cloud_storage")
}

model User {
  id                String             @id @default(uuid()) @db.VarChar()
  firstName         String             @db.VarChar()
  lastName          String             @db.VarChar()
  email             String             @db.VarChar()
  encryptedPassword String?            @db.VarChar()
  providerName      String             @default("email") @db.VarChar()
  providerId        String             @db.VarChar()
  confirmationCode  String?            @db.VarChar()
  resetPasswordCode String?            @db.VarChar()
  accounts          WorkspaceAccount[]

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  blockedAt           DateTime?
  confirmedAt         DateTime?
  resetPasswordSentAt DateTime?

  @@unique([providerName, providerId])
  @@map("users")
}

model Service {
  id   String @id @default(uuid()) @db.VarChar()
  name String @db.VarChar()

  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  accounts  WorkspaceAccount[]

  @@map("services")
}

model Workspace {
  id                                   String                                @id @default(uuid()) @db.VarChar()
  key                                  String                                @db.VarChar()
  name                                 String                                @db.VarChar()
  billingSettings                      WorkspaceBillingSettings?
  invitations                          WorkspaceInvitation[]
  accounts                             WorkspaceAccount[]
  revisions                            ProjectRevision[]
  languages                            Language[]
  projects                             Project[]
  phrases                              Phrase[]
  phraseTranslations                   PhraseTranslation[]
  destinations                         Destination[]
  destinationConfigsCDN                DestinationConfigCDN[]
  destinationConfigsGoogleCloudStorage DestinationConfigGoogleCloudStorage[]
  destinationConfigsAWSS3              DestinationConfigAWSS3[]
  tags                                 Tag[]
  taggables                            Taggable[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   @db.VarChar()
  updatedBy String?  @db.VarChar()

  @@unique([key])
  @@map("workspaces")
}

model WorkspaceBillingSettings {
  id                   String               @id @default(uuid()) @db.VarChar()
  workspaceId          String               @db.VarChar()
  stripeCustomerId     String?              @db.VarChar()
  stripeSubscriptionId String?              @db.VarChar()
  plan                 WorkspaceBillingPlan
  workspace            Workspace            @relation(fields: [workspaceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   @db.VarChar()
  updatedBy String?  @db.VarChar()

  @@unique([workspaceId])
  @@map("workspace_billing_settings")
}

model WorkspaceAccount {
  id          String               @id @default(uuid()) @db.VarChar()
  workspaceId String               @db.VarChar()
  type        WorkspaceAccountType
  role        WorkspaceAccountRole
  userId      String?              @db.VarChar()
  serviceId   String?              @db.VarChar()
  apiKey      String?              @db.VarChar()
  user        User?                @relation(fields: [userId], references: [id])
  service     Service?             @relation(fields: [serviceId], references: [id])
  workspace   Workspace            @relation(fields: [workspaceId], references: [id])

  invitedBy String?   @db.VarChar()
  blockedBy String?   @db.VarChar()
  blockedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([userId, workspaceId])
  @@unique([apiKey])
  @@map("workspace_accounts")
}

model WorkspaceInvitation {
  id             String               @id @default(uuid()) @db.VarChar()
  workspaceId    String               @db.VarChar()
  role           WorkspaceAccountRole
  email          String               @db.VarChar()
  invitationCode String               @db.VarChar()
  workspace      Workspace            @relation(fields: [workspaceId], references: [id])

  createdBy  String    @db.VarChar()
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  expiredAt  DateTime
  acceptedAt DateTime?

  @@map("workspace_invitations")
}

model Language {
  id                 String              @id @default(uuid()) @db.VarChar()
  workspaceId        String              @db.VarChar()
  locale             String              @db.VarChar()
  name               String              @db.VarChar()
  workspace          Workspace           @relation(fields: [workspaceId], references: [id])
  projects           Project[]           @relation("projects_languages")
  phraseTranslations PhraseTranslation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   @db.VarChar()
  updatedBy String?  @db.VarChar()

  @@unique([workspaceId, locale])
  @@map("languages")
}

model Project {
  id          String            @id @default(uuid()) @db.VarChar()
  workspaceId String            @db.VarChar()
  name        String            @db.VarChar()
  description String?           @db.VarChar()
  workspace   Workspace         @relation(fields: [workspaceId], references: [id])
  languages   Language[]        @relation("projects_languages")
  revisions   ProjectRevision[]
  phrases     Phrase[]
  tags        Tag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   @db.VarChar()
  updatedBy String?  @db.VarChar()

  @@unique([workspaceId, name])
  @@map("projects")
}

model ProjectRevision {
  id                 String               @id @default(uuid()) @db.VarChar()
  workspaceId        String               @db.VarChar()
  projectId          String               @db.VarChar()
  isMaster           Boolean              @default(false)
  name               String               @db.VarChar()
  state              ProjectRevisionState
  project            Project              @relation(fields: [projectId], references: [id])
  workspace          Workspace            @relation(fields: [workspaceId], references: [id])
  phrases            Phrase[]
  phraseTranslations PhraseTranslation[]
  destinations       Destination[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  mergedAt  DateTime?
  createdBy String    @db.VarChar()
  updatedBy String?   @db.VarChar()
  mergedBy  String?   @db.VarChar()

  @@map("project_revisions")
}

model Phrase {
  id           String              @id @default(uuid()) @db.VarChar()
  key          String              @db.VarChar()
  revisionId   String              @db.VarChar()
  projectId    String              @db.VarChar()
  workspaceId  String              @db.VarChar()
  revision     ProjectRevision     @relation(fields: [revisionId], references: [id])
  project      Project             @relation(fields: [projectId], references: [id])
  workspace    Workspace           @relation(fields: [workspaceId], references: [id])
  translations PhraseTranslation[]
  taggables    Taggable[]          @relation("phrase_tags")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   @db.VarChar()
  updatedBy String?  @db.VarChar()

  @@unique([key, revisionId])
  @@map("phrases")
}

model PhraseTranslation {
  id          String          @id @default(uuid()) @db.VarChar()
  languageId  String          @db.VarChar()
  revisionId  String          @db.VarChar()
  workspaceId String          @db.VarChar()
  phraseId    String          @db.VarChar()
  content     String
  language    Language        @relation(fields: [languageId], references: [id])
  phrase      Phrase          @relation(fields: [phraseId], references: [id])
  revision    ProjectRevision @relation(fields: [revisionId], references: [id])
  workspace   Workspace       @relation(fields: [workspaceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   @db.VarChar()
  updatedBy String?  @db.VarChar()

  @@unique([phraseId, languageId, revisionId])
  @@map("phrase_translations")
}

model Tag {
  id          String    @id @default(uuid()) @db.VarChar()
  workspaceId String    @db.VarChar()
  projectId   String    @db.VarChar()
  key         String    @db.VarChar()
  value       String    @db.VarChar()
  color       String
  description String?
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  project     Project   @relation(fields: [projectId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   @db.VarChar()
  updatedBy String?  @db.VarChar()

  @@unique([projectId, key, value])
  @@map("tags")
}

enum TaggableType {
  phrase @map("phrase")
}

model Taggable {
  id          String       @id @default(uuid()) @db.VarChar()
  workspaceId String       @db.VarChar()
  tagId       String       @db.VarChar()
  recordId    String       @db.VarChar()
  recordType  TaggableType
  phrase      Phrase?      @relation("phrase_tags", fields: [recordId], references: [id])
  workspace   Workspace    @relation(fields: [workspaceId], references: [id])

  createdAt DateTime @default(now())
  createdBy String   @db.VarChar()

  @@map("taggables")
}

model Destination {
  id                       String                               @id @default(uuid()) @db.VarChar()
  workspaceId              String                               @db.VarChar()
  revisionId               String                               @db.VarChar()
  name                     String                               @db.VarChar()
  type                     DestinationType
  active                   Boolean                              @default(true)
  lastSyncError            String?
  lastSyncAt               DateTime?
  lastSuccessfulSyncAt     DateTime?
  workspace                Workspace                            @relation(fields: [workspaceId], references: [id])
  revision                 ProjectRevision                      @relation(fields: [revisionId], references: [id])
  configCDN                DestinationConfigCDN?
  configGoogleCloudStorage DestinationConfigGoogleCloudStorage?
  configAWSS3              DestinationConfigAWSS3?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String   @db.VarChar()
  updatedBy String?  @db.VarChar()

  @@map("destinations")
}

model DestinationConfigCDN {
  id                       String      @id @default(uuid()) @db.VarChar()
  destinationId            String      @db.VarChar()
  workspaceId              String      @db.VarChar()
  destination              Destination @relation(fields: [destinationId], references: [id])
  workspace                Workspace   @relation(fields: [workspaceId], references: [id])
  fileFormat               String      @db.VarChar()
  includeEmptyTranslations Boolean     @default(false)
  urls                     String[]

  @@unique([destinationId])
  @@map("destination_configs_cdn")
}

model DestinationConfigGoogleCloudStorage {
  id                       String      @id @default(uuid()) @db.VarChar()
  destinationId            String      @db.VarChar()
  workspaceId              String      @db.VarChar()
  destination              Destination @relation(fields: [destinationId], references: [id])
  workspace                Workspace   @relation(fields: [workspaceId], references: [id])
  fileFormat               String      @db.VarChar()
  includeEmptyTranslations Boolean     @default(false)
  objectsPrefix            String?     @db.VarChar()
  googleCloudProjectId     String      @db.VarChar()
  googleCloudBucketId      String      @db.VarChar()

  // Encrypted
  googleCloudServiceAccountKey String

  @@unique([destinationId])
  @@map("destination_configs_google_cloud_storage")
}

model DestinationConfigAWSS3 {
  id                       String      @id @default(uuid()) @db.VarChar()
  destinationId            String      @db.VarChar()
  workspaceId              String      @db.VarChar()
  destination              Destination @relation(fields: [destinationId], references: [id])
  workspace                Workspace   @relation(fields: [workspaceId], references: [id])
  fileFormat               String      @db.VarChar()
  includeEmptyTranslations Boolean     @default(false)
  objectsPrefix            String?     @db.VarChar()
  awsBucketId              String      @db.VarChar()
  awsRegion                String      @db.VarChar()

  // Encrypted
  awsAccessKeyId     String
  // Encrypted
  awsSecretAccessKey String

  @@unique([destinationId])
  @@map("destination_configs_aws_s3")
}
